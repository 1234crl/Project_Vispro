#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project_Vispro
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BudgetingManagement")]
	public partial class BudgetingManagementDBMLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBudget(Budget instance);
    partial void UpdateBudget(Budget instance);
    partial void DeleteBudget(Budget instance);
    partial void InsertCategoryExpense(CategoryExpense instance);
    partial void UpdateCategoryExpense(CategoryExpense instance);
    partial void DeleteCategoryExpense(CategoryExpense instance);
    partial void InsertCategoryIncome(CategoryIncome instance);
    partial void UpdateCategoryIncome(CategoryIncome instance);
    partial void DeleteCategoryIncome(CategoryIncome instance);
    partial void InsertCategoryPeople(CategoryPeople instance);
    partial void UpdateCategoryPeople(CategoryPeople instance);
    partial void DeleteCategoryPeople(CategoryPeople instance);
    partial void InsertDetailBudget(DetailBudget instance);
    partial void UpdateDetailBudget(DetailBudget instance);
    partial void DeleteDetailBudget(DetailBudget instance);
    partial void InsertDetailExpense(DetailExpense instance);
    partial void UpdateDetailExpense(DetailExpense instance);
    partial void DeleteDetailExpense(DetailExpense instance);
    partial void InsertDetailIncome(DetailIncome instance);
    partial void UpdateDetailIncome(DetailIncome instance);
    partial void DeleteDetailIncome(DetailIncome instance);
    partial void InsertDetailPigether(DetailPigether instance);
    partial void UpdateDetailPigether(DetailPigether instance);
    partial void DeleteDetailPigether(DetailPigether instance);
    partial void InsertExpense(Expense instance);
    partial void UpdateExpense(Expense instance);
    partial void DeleteExpense(Expense instance);
    partial void InsertIncome(Income instance);
    partial void UpdateIncome(Income instance);
    partial void DeleteIncome(Income instance);
    partial void InsertPigether(Pigether instance);
    partial void UpdatePigether(Pigether instance);
    partial void DeletePigether(Pigether instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public BudgetingManagementDBMLDataContext() : 
				base(global::Project_Vispro.Properties.Settings.Default.BudgetingManagementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BudgetingManagementDBMLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BudgetingManagementDBMLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BudgetingManagementDBMLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BudgetingManagementDBMLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Budget> Budgets
		{
			get
			{
				return this.GetTable<Budget>();
			}
		}
		
		public System.Data.Linq.Table<CategoryExpense> CategoryExpenses
		{
			get
			{
				return this.GetTable<CategoryExpense>();
			}
		}
		
		public System.Data.Linq.Table<CategoryIncome> CategoryIncomes
		{
			get
			{
				return this.GetTable<CategoryIncome>();
			}
		}
		
		public System.Data.Linq.Table<CategoryPeople> CategoryPeoples
		{
			get
			{
				return this.GetTable<CategoryPeople>();
			}
		}
		
		public System.Data.Linq.Table<DetailBudget> DetailBudgets
		{
			get
			{
				return this.GetTable<DetailBudget>();
			}
		}
		
		public System.Data.Linq.Table<DetailExpense> DetailExpenses
		{
			get
			{
				return this.GetTable<DetailExpense>();
			}
		}
		
		public System.Data.Linq.Table<DetailIncome> DetailIncomes
		{
			get
			{
				return this.GetTable<DetailIncome>();
			}
		}
		
		public System.Data.Linq.Table<DetailPigether> DetailPigethers
		{
			get
			{
				return this.GetTable<DetailPigether>();
			}
		}
		
		public System.Data.Linq.Table<Expense> Expenses
		{
			get
			{
				return this.GetTable<Expense>();
			}
		}
		
		public System.Data.Linq.Table<Income> Incomes
		{
			get
			{
				return this.GetTable<Income>();
			}
		}
		
		public System.Data.Linq.Table<Pigether> Pigethers
		{
			get
			{
				return this.GetTable<Pigether>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<viewExpenseBudget> viewExpenseBudgets
		{
			get
			{
				return this.GetTable<viewExpenseBudget>();
			}
		}
		
		public System.Data.Linq.Table<viewAllExpense> viewAllExpenses
		{
			get
			{
				return this.GetTable<viewAllExpense>();
			}
		}
		
		public System.Data.Linq.Table<viewAllEarning> viewAllEarnings
		{
			get
			{
				return this.GetTable<viewAllEarning>();
			}
		}
		
		public System.Data.Linq.Table<viewDetailPigether> viewDetailPigethers
		{
			get
			{
				return this.GetTable<viewDetailPigether>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Budget")]
	public partial class Budget : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _budget_id;
		
		private int _user_id;
		
		private EntitySet<DetailBudget> _DetailBudgets;
		
		private EntitySet<Expense> _Expenses;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onbudget_idChanging(int value);
    partial void Onbudget_idChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    #endregion
		
		public Budget()
		{
			this._DetailBudgets = new EntitySet<DetailBudget>(new Action<DetailBudget>(this.attach_DetailBudgets), new Action<DetailBudget>(this.detach_DetailBudgets));
			this._Expenses = new EntitySet<Expense>(new Action<Expense>(this.attach_Expenses), new Action<Expense>(this.detach_Expenses));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_budget_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int budget_id
		{
			get
			{
				return this._budget_id;
			}
			set
			{
				if ((this._budget_id != value))
				{
					this.Onbudget_idChanging(value);
					this.SendPropertyChanging();
					this._budget_id = value;
					this.SendPropertyChanged("budget_id");
					this.Onbudget_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Budget_DetailBudget", Storage="_DetailBudgets", ThisKey="budget_id", OtherKey="budget_id")]
		public EntitySet<DetailBudget> DetailBudgets
		{
			get
			{
				return this._DetailBudgets;
			}
			set
			{
				this._DetailBudgets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Budget_Expense", Storage="_Expenses", ThisKey="budget_id", OtherKey="budget_id")]
		public EntitySet<Expense> Expenses
		{
			get
			{
				return this._Expenses;
			}
			set
			{
				this._Expenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Budget", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Budgets.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Budgets.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailBudgets(DetailBudget entity)
		{
			this.SendPropertyChanging();
			entity.Budget = this;
		}
		
		private void detach_DetailBudgets(DetailBudget entity)
		{
			this.SendPropertyChanging();
			entity.Budget = null;
		}
		
		private void attach_Expenses(Expense entity)
		{
			this.SendPropertyChanging();
			entity.Budget = this;
		}
		
		private void detach_Expenses(Expense entity)
		{
			this.SendPropertyChanging();
			entity.Budget = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryExpenses")]
	public partial class CategoryExpense : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _categoryExpense_id;
		
		private int _user_id;
		
		private string _categoryExpense_name;
		
		private EntitySet<DetailBudget> _DetailBudgets;
		
		private EntitySet<Expense> _Expenses;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncategoryExpense_idChanging(int value);
    partial void OncategoryExpense_idChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OncategoryExpense_nameChanging(string value);
    partial void OncategoryExpense_nameChanged();
    #endregion
		
		public CategoryExpense()
		{
			this._DetailBudgets = new EntitySet<DetailBudget>(new Action<DetailBudget>(this.attach_DetailBudgets), new Action<DetailBudget>(this.detach_DetailBudgets));
			this._Expenses = new EntitySet<Expense>(new Action<Expense>(this.attach_Expenses), new Action<Expense>(this.detach_Expenses));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryExpense_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int categoryExpense_id
		{
			get
			{
				return this._categoryExpense_id;
			}
			set
			{
				if ((this._categoryExpense_id != value))
				{
					this.OncategoryExpense_idChanging(value);
					this.SendPropertyChanging();
					this._categoryExpense_id = value;
					this.SendPropertyChanged("categoryExpense_id");
					this.OncategoryExpense_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryExpense_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string categoryExpense_name
		{
			get
			{
				return this._categoryExpense_name;
			}
			set
			{
				if ((this._categoryExpense_name != value))
				{
					this.OncategoryExpense_nameChanging(value);
					this.SendPropertyChanging();
					this._categoryExpense_name = value;
					this.SendPropertyChanged("categoryExpense_name");
					this.OncategoryExpense_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryExpense_DetailBudget", Storage="_DetailBudgets", ThisKey="categoryExpense_id", OtherKey="categoryExpense_id")]
		public EntitySet<DetailBudget> DetailBudgets
		{
			get
			{
				return this._DetailBudgets;
			}
			set
			{
				this._DetailBudgets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryExpense_Expense", Storage="_Expenses", ThisKey="categoryExpense_id", OtherKey="categoryExpense_id")]
		public EntitySet<Expense> Expenses
		{
			get
			{
				return this._Expenses;
			}
			set
			{
				this._Expenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CategoryExpense", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CategoryExpenses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CategoryExpenses.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailBudgets(DetailBudget entity)
		{
			this.SendPropertyChanging();
			entity.CategoryExpense = this;
		}
		
		private void detach_DetailBudgets(DetailBudget entity)
		{
			this.SendPropertyChanging();
			entity.CategoryExpense = null;
		}
		
		private void attach_Expenses(Expense entity)
		{
			this.SendPropertyChanging();
			entity.CategoryExpense = this;
		}
		
		private void detach_Expenses(Expense entity)
		{
			this.SendPropertyChanging();
			entity.CategoryExpense = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryIncomes")]
	public partial class CategoryIncome : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _categoryIncome_id;
		
		private string _categoryIncome_name;
		
		private int _user_id;
		
		private EntitySet<Income> _Incomes;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncategoryIncome_idChanging(int value);
    partial void OncategoryIncome_idChanged();
    partial void OncategoryIncome_nameChanging(string value);
    partial void OncategoryIncome_nameChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    #endregion
		
		public CategoryIncome()
		{
			this._Incomes = new EntitySet<Income>(new Action<Income>(this.attach_Incomes), new Action<Income>(this.detach_Incomes));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryIncome_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int categoryIncome_id
		{
			get
			{
				return this._categoryIncome_id;
			}
			set
			{
				if ((this._categoryIncome_id != value))
				{
					this.OncategoryIncome_idChanging(value);
					this.SendPropertyChanging();
					this._categoryIncome_id = value;
					this.SendPropertyChanged("categoryIncome_id");
					this.OncategoryIncome_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryIncome_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string categoryIncome_name
		{
			get
			{
				return this._categoryIncome_name;
			}
			set
			{
				if ((this._categoryIncome_name != value))
				{
					this.OncategoryIncome_nameChanging(value);
					this.SendPropertyChanging();
					this._categoryIncome_name = value;
					this.SendPropertyChanged("categoryIncome_name");
					this.OncategoryIncome_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryIncome_Income", Storage="_Incomes", ThisKey="categoryIncome_id", OtherKey="categoryIncome_id")]
		public EntitySet<Income> Incomes
		{
			get
			{
				return this._Incomes;
			}
			set
			{
				this._Incomes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CategoryIncome", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CategoryIncomes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CategoryIncomes.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Incomes(Income entity)
		{
			this.SendPropertyChanging();
			entity.CategoryIncome = this;
		}
		
		private void detach_Incomes(Income entity)
		{
			this.SendPropertyChanging();
			entity.CategoryIncome = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryPeople")]
	public partial class CategoryPeople : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _people_id;
		
		private string _people_name;
		
		private int _user_id;
		
		private EntitySet<DetailPigether> _DetailPigethers;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpeople_idChanging(int value);
    partial void Onpeople_idChanged();
    partial void Onpeople_nameChanging(string value);
    partial void Onpeople_nameChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    #endregion
		
		public CategoryPeople()
		{
			this._DetailPigethers = new EntitySet<DetailPigether>(new Action<DetailPigether>(this.attach_DetailPigethers), new Action<DetailPigether>(this.detach_DetailPigethers));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_people_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int people_id
		{
			get
			{
				return this._people_id;
			}
			set
			{
				if ((this._people_id != value))
				{
					this.Onpeople_idChanging(value);
					this.SendPropertyChanging();
					this._people_id = value;
					this.SendPropertyChanged("people_id");
					this.Onpeople_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_people_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string people_name
		{
			get
			{
				return this._people_name;
			}
			set
			{
				if ((this._people_name != value))
				{
					this.Onpeople_nameChanging(value);
					this.SendPropertyChanging();
					this._people_name = value;
					this.SendPropertyChanged("people_name");
					this.Onpeople_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryPeople_DetailPigether", Storage="_DetailPigethers", ThisKey="people_id", OtherKey="categoryPeople_id")]
		public EntitySet<DetailPigether> DetailPigethers
		{
			get
			{
				return this._DetailPigethers;
			}
			set
			{
				this._DetailPigethers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CategoryPeople", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CategoryPeoples.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CategoryPeoples.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailPigethers(DetailPigether entity)
		{
			this.SendPropertyChanging();
			entity.CategoryPeople = this;
		}
		
		private void detach_DetailPigethers(DetailPigether entity)
		{
			this.SendPropertyChanging();
			entity.CategoryPeople = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailBudget")]
	public partial class DetailBudget : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _detailBudget_id;
		
		private int _budget_id;
		
		private int _categoryExpense_id;
		
		private double _amount;
		
		private System.DateTime _month;
		
		private EntityRef<Budget> _Budget;
		
		private EntityRef<CategoryExpense> _CategoryExpense;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndetailBudget_idChanging(int value);
    partial void OndetailBudget_idChanged();
    partial void Onbudget_idChanging(int value);
    partial void Onbudget_idChanged();
    partial void OncategoryExpense_idChanging(int value);
    partial void OncategoryExpense_idChanged();
    partial void OnamountChanging(double value);
    partial void OnamountChanged();
    partial void OnmonthChanging(System.DateTime value);
    partial void OnmonthChanged();
    #endregion
		
		public DetailBudget()
		{
			this._Budget = default(EntityRef<Budget>);
			this._CategoryExpense = default(EntityRef<CategoryExpense>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_detailBudget_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int detailBudget_id
		{
			get
			{
				return this._detailBudget_id;
			}
			set
			{
				if ((this._detailBudget_id != value))
				{
					this.OndetailBudget_idChanging(value);
					this.SendPropertyChanging();
					this._detailBudget_id = value;
					this.SendPropertyChanged("detailBudget_id");
					this.OndetailBudget_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_budget_id", DbType="Int NOT NULL")]
		public int budget_id
		{
			get
			{
				return this._budget_id;
			}
			set
			{
				if ((this._budget_id != value))
				{
					if (this._Budget.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbudget_idChanging(value);
					this.SendPropertyChanging();
					this._budget_id = value;
					this.SendPropertyChanged("budget_id");
					this.Onbudget_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryExpense_id", DbType="Int NOT NULL")]
		public int categoryExpense_id
		{
			get
			{
				return this._categoryExpense_id;
			}
			set
			{
				if ((this._categoryExpense_id != value))
				{
					if (this._CategoryExpense.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryExpense_idChanging(value);
					this.SendPropertyChanging();
					this._categoryExpense_id = value;
					this.SendPropertyChanged("categoryExpense_id");
					this.OncategoryExpense_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Float NOT NULL")]
		public double amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_month", DbType="Date NOT NULL")]
		public System.DateTime month
		{
			get
			{
				return this._month;
			}
			set
			{
				if ((this._month != value))
				{
					this.OnmonthChanging(value);
					this.SendPropertyChanging();
					this._month = value;
					this.SendPropertyChanged("month");
					this.OnmonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Budget_DetailBudget", Storage="_Budget", ThisKey="budget_id", OtherKey="budget_id", IsForeignKey=true)]
		public Budget Budget
		{
			get
			{
				return this._Budget.Entity;
			}
			set
			{
				Budget previousValue = this._Budget.Entity;
				if (((previousValue != value) 
							|| (this._Budget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Budget.Entity = null;
						previousValue.DetailBudgets.Remove(this);
					}
					this._Budget.Entity = value;
					if ((value != null))
					{
						value.DetailBudgets.Add(this);
						this._budget_id = value.budget_id;
					}
					else
					{
						this._budget_id = default(int);
					}
					this.SendPropertyChanged("Budget");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryExpense_DetailBudget", Storage="_CategoryExpense", ThisKey="categoryExpense_id", OtherKey="categoryExpense_id", IsForeignKey=true)]
		public CategoryExpense CategoryExpense
		{
			get
			{
				return this._CategoryExpense.Entity;
			}
			set
			{
				CategoryExpense previousValue = this._CategoryExpense.Entity;
				if (((previousValue != value) 
							|| (this._CategoryExpense.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryExpense.Entity = null;
						previousValue.DetailBudgets.Remove(this);
					}
					this._CategoryExpense.Entity = value;
					if ((value != null))
					{
						value.DetailBudgets.Add(this);
						this._categoryExpense_id = value.categoryExpense_id;
					}
					else
					{
						this._categoryExpense_id = default(int);
					}
					this.SendPropertyChanged("CategoryExpense");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailExpenses")]
	public partial class DetailExpense : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _expense_id;
		
		private double _amount;
		
		private int _detailExpense_id;
		
		private System.DateTime _addedDate;
		
		private EntityRef<Expense> _Expense;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onexpense_idChanging(int value);
    partial void Onexpense_idChanged();
    partial void OnamountChanging(double value);
    partial void OnamountChanged();
    partial void OndetailExpense_idChanging(int value);
    partial void OndetailExpense_idChanged();
    partial void OnaddedDateChanging(System.DateTime value);
    partial void OnaddedDateChanged();
    #endregion
		
		public DetailExpense()
		{
			this._Expense = default(EntityRef<Expense>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expense_id", DbType="Int NOT NULL")]
		public int expense_id
		{
			get
			{
				return this._expense_id;
			}
			set
			{
				if ((this._expense_id != value))
				{
					if (this._Expense.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onexpense_idChanging(value);
					this.SendPropertyChanging();
					this._expense_id = value;
					this.SendPropertyChanged("expense_id");
					this.Onexpense_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Float NOT NULL")]
		public double amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_detailExpense_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int detailExpense_id
		{
			get
			{
				return this._detailExpense_id;
			}
			set
			{
				if ((this._detailExpense_id != value))
				{
					this.OndetailExpense_idChanging(value);
					this.SendPropertyChanging();
					this._detailExpense_id = value;
					this.SendPropertyChanged("detailExpense_id");
					this.OndetailExpense_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addedDate", DbType="Date NOT NULL")]
		public System.DateTime addedDate
		{
			get
			{
				return this._addedDate;
			}
			set
			{
				if ((this._addedDate != value))
				{
					this.OnaddedDateChanging(value);
					this.SendPropertyChanging();
					this._addedDate = value;
					this.SendPropertyChanged("addedDate");
					this.OnaddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Expense_DetailExpense", Storage="_Expense", ThisKey="expense_id", OtherKey="expense_id", IsForeignKey=true)]
		public Expense Expense
		{
			get
			{
				return this._Expense.Entity;
			}
			set
			{
				Expense previousValue = this._Expense.Entity;
				if (((previousValue != value) 
							|| (this._Expense.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expense.Entity = null;
						previousValue.DetailExpenses.Remove(this);
					}
					this._Expense.Entity = value;
					if ((value != null))
					{
						value.DetailExpenses.Add(this);
						this._expense_id = value.expense_id;
					}
					else
					{
						this._expense_id = default(int);
					}
					this.SendPropertyChanged("Expense");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailIncome")]
	public partial class DetailIncome : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _detailIncome_id;
		
		private int _income_id;
		
		private double _amount;
		
		private System.DateTime _addedDate;
		
		private EntityRef<Income> _Income;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndetailIncome_idChanging(int value);
    partial void OndetailIncome_idChanged();
    partial void Onincome_idChanging(int value);
    partial void Onincome_idChanged();
    partial void OnamountChanging(double value);
    partial void OnamountChanged();
    partial void OnaddedDateChanging(System.DateTime value);
    partial void OnaddedDateChanged();
    #endregion
		
		public DetailIncome()
		{
			this._Income = default(EntityRef<Income>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_detailIncome_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int detailIncome_id
		{
			get
			{
				return this._detailIncome_id;
			}
			set
			{
				if ((this._detailIncome_id != value))
				{
					this.OndetailIncome_idChanging(value);
					this.SendPropertyChanging();
					this._detailIncome_id = value;
					this.SendPropertyChanged("detailIncome_id");
					this.OndetailIncome_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_income_id", DbType="Int NOT NULL")]
		public int income_id
		{
			get
			{
				return this._income_id;
			}
			set
			{
				if ((this._income_id != value))
				{
					if (this._Income.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onincome_idChanging(value);
					this.SendPropertyChanging();
					this._income_id = value;
					this.SendPropertyChanged("income_id");
					this.Onincome_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Float NOT NULL")]
		public double amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addedDate", DbType="Date NOT NULL")]
		public System.DateTime addedDate
		{
			get
			{
				return this._addedDate;
			}
			set
			{
				if ((this._addedDate != value))
				{
					this.OnaddedDateChanging(value);
					this.SendPropertyChanging();
					this._addedDate = value;
					this.SendPropertyChanged("addedDate");
					this.OnaddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Income_DetailIncome", Storage="_Income", ThisKey="income_id", OtherKey="income_id", IsForeignKey=true)]
		public Income Income
		{
			get
			{
				return this._Income.Entity;
			}
			set
			{
				Income previousValue = this._Income.Entity;
				if (((previousValue != value) 
							|| (this._Income.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Income.Entity = null;
						previousValue.DetailIncomes.Remove(this);
					}
					this._Income.Entity = value;
					if ((value != null))
					{
						value.DetailIncomes.Add(this);
						this._income_id = value.income_id;
					}
					else
					{
						this._income_id = default(int);
					}
					this.SendPropertyChanged("Income");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DetailPigether")]
	public partial class DetailPigether : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _detailPigether_id;
		
		private int _pigether_id;
		
		private int _categoryPeople_id;
		
		private double _amount;
		
		private EntityRef<CategoryPeople> _CategoryPeople;
		
		private EntityRef<Pigether> _Pigether;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndetailPigether_idChanging(int value);
    partial void OndetailPigether_idChanged();
    partial void Onpigether_idChanging(int value);
    partial void Onpigether_idChanged();
    partial void OncategoryPeople_idChanging(int value);
    partial void OncategoryPeople_idChanged();
    partial void OnamountChanging(double value);
    partial void OnamountChanged();
    #endregion
		
		public DetailPigether()
		{
			this._CategoryPeople = default(EntityRef<CategoryPeople>);
			this._Pigether = default(EntityRef<Pigether>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_detailPigether_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int detailPigether_id
		{
			get
			{
				return this._detailPigether_id;
			}
			set
			{
				if ((this._detailPigether_id != value))
				{
					this.OndetailPigether_idChanging(value);
					this.SendPropertyChanging();
					this._detailPigether_id = value;
					this.SendPropertyChanged("detailPigether_id");
					this.OndetailPigether_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pigether_id", DbType="Int NOT NULL")]
		public int pigether_id
		{
			get
			{
				return this._pigether_id;
			}
			set
			{
				if ((this._pigether_id != value))
				{
					if (this._Pigether.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpigether_idChanging(value);
					this.SendPropertyChanging();
					this._pigether_id = value;
					this.SendPropertyChanged("pigether_id");
					this.Onpigether_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryPeople_id", DbType="Int NOT NULL")]
		public int categoryPeople_id
		{
			get
			{
				return this._categoryPeople_id;
			}
			set
			{
				if ((this._categoryPeople_id != value))
				{
					if (this._CategoryPeople.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryPeople_idChanging(value);
					this.SendPropertyChanging();
					this._categoryPeople_id = value;
					this.SendPropertyChanged("categoryPeople_id");
					this.OncategoryPeople_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Float NOT NULL")]
		public double amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryPeople_DetailPigether", Storage="_CategoryPeople", ThisKey="categoryPeople_id", OtherKey="people_id", IsForeignKey=true)]
		public CategoryPeople CategoryPeople
		{
			get
			{
				return this._CategoryPeople.Entity;
			}
			set
			{
				CategoryPeople previousValue = this._CategoryPeople.Entity;
				if (((previousValue != value) 
							|| (this._CategoryPeople.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryPeople.Entity = null;
						previousValue.DetailPigethers.Remove(this);
					}
					this._CategoryPeople.Entity = value;
					if ((value != null))
					{
						value.DetailPigethers.Add(this);
						this._categoryPeople_id = value.people_id;
					}
					else
					{
						this._categoryPeople_id = default(int);
					}
					this.SendPropertyChanged("CategoryPeople");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pigether_DetailPigether", Storage="_Pigether", ThisKey="pigether_id", OtherKey="pigether_id", IsForeignKey=true)]
		public Pigether Pigether
		{
			get
			{
				return this._Pigether.Entity;
			}
			set
			{
				Pigether previousValue = this._Pigether.Entity;
				if (((previousValue != value) 
							|| (this._Pigether.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pigether.Entity = null;
						previousValue.DetailPigethers.Remove(this);
					}
					this._Pigether.Entity = value;
					if ((value != null))
					{
						value.DetailPigethers.Add(this);
						this._pigether_id = value.pigether_id;
					}
					else
					{
						this._pigether_id = default(int);
					}
					this.SendPropertyChanged("Pigether");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Expenses")]
	public partial class Expense : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _expense_id;
		
		private int _user_id;
		
		private int _budget_id;
		
		private int _categoryExpense_id;
		
		private EntitySet<DetailExpense> _DetailExpenses;
		
		private EntityRef<Budget> _Budget;
		
		private EntityRef<CategoryExpense> _CategoryExpense;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onexpense_idChanging(int value);
    partial void Onexpense_idChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onbudget_idChanging(int value);
    partial void Onbudget_idChanged();
    partial void OncategoryExpense_idChanging(int value);
    partial void OncategoryExpense_idChanged();
    #endregion
		
		public Expense()
		{
			this._DetailExpenses = new EntitySet<DetailExpense>(new Action<DetailExpense>(this.attach_DetailExpenses), new Action<DetailExpense>(this.detach_DetailExpenses));
			this._Budget = default(EntityRef<Budget>);
			this._CategoryExpense = default(EntityRef<CategoryExpense>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expense_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int expense_id
		{
			get
			{
				return this._expense_id;
			}
			set
			{
				if ((this._expense_id != value))
				{
					this.Onexpense_idChanging(value);
					this.SendPropertyChanging();
					this._expense_id = value;
					this.SendPropertyChanged("expense_id");
					this.Onexpense_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_budget_id", DbType="Int NOT NULL")]
		public int budget_id
		{
			get
			{
				return this._budget_id;
			}
			set
			{
				if ((this._budget_id != value))
				{
					if (this._Budget.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbudget_idChanging(value);
					this.SendPropertyChanging();
					this._budget_id = value;
					this.SendPropertyChanged("budget_id");
					this.Onbudget_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryExpense_id", DbType="Int NOT NULL")]
		public int categoryExpense_id
		{
			get
			{
				return this._categoryExpense_id;
			}
			set
			{
				if ((this._categoryExpense_id != value))
				{
					if (this._CategoryExpense.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryExpense_idChanging(value);
					this.SendPropertyChanging();
					this._categoryExpense_id = value;
					this.SendPropertyChanged("categoryExpense_id");
					this.OncategoryExpense_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Expense_DetailExpense", Storage="_DetailExpenses", ThisKey="expense_id", OtherKey="expense_id")]
		public EntitySet<DetailExpense> DetailExpenses
		{
			get
			{
				return this._DetailExpenses;
			}
			set
			{
				this._DetailExpenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Budget_Expense", Storage="_Budget", ThisKey="budget_id", OtherKey="budget_id", IsForeignKey=true)]
		public Budget Budget
		{
			get
			{
				return this._Budget.Entity;
			}
			set
			{
				Budget previousValue = this._Budget.Entity;
				if (((previousValue != value) 
							|| (this._Budget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Budget.Entity = null;
						previousValue.Expenses.Remove(this);
					}
					this._Budget.Entity = value;
					if ((value != null))
					{
						value.Expenses.Add(this);
						this._budget_id = value.budget_id;
					}
					else
					{
						this._budget_id = default(int);
					}
					this.SendPropertyChanged("Budget");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryExpense_Expense", Storage="_CategoryExpense", ThisKey="categoryExpense_id", OtherKey="categoryExpense_id", IsForeignKey=true)]
		public CategoryExpense CategoryExpense
		{
			get
			{
				return this._CategoryExpense.Entity;
			}
			set
			{
				CategoryExpense previousValue = this._CategoryExpense.Entity;
				if (((previousValue != value) 
							|| (this._CategoryExpense.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryExpense.Entity = null;
						previousValue.Expenses.Remove(this);
					}
					this._CategoryExpense.Entity = value;
					if ((value != null))
					{
						value.Expenses.Add(this);
						this._categoryExpense_id = value.categoryExpense_id;
					}
					else
					{
						this._categoryExpense_id = default(int);
					}
					this.SendPropertyChanged("CategoryExpense");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Expense", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Expenses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Expenses.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailExpenses(DetailExpense entity)
		{
			this.SendPropertyChanging();
			entity.Expense = this;
		}
		
		private void detach_DetailExpenses(DetailExpense entity)
		{
			this.SendPropertyChanging();
			entity.Expense = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Income")]
	public partial class Income : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _income_id;
		
		private int _user_id;
		
		private int _categoryIncome_id;
		
		private EntitySet<DetailIncome> _DetailIncomes;
		
		private EntityRef<CategoryIncome> _CategoryIncome;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onincome_idChanging(int value);
    partial void Onincome_idChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OncategoryIncome_idChanging(int value);
    partial void OncategoryIncome_idChanged();
    #endregion
		
		public Income()
		{
			this._DetailIncomes = new EntitySet<DetailIncome>(new Action<DetailIncome>(this.attach_DetailIncomes), new Action<DetailIncome>(this.detach_DetailIncomes));
			this._CategoryIncome = default(EntityRef<CategoryIncome>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_income_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int income_id
		{
			get
			{
				return this._income_id;
			}
			set
			{
				if ((this._income_id != value))
				{
					this.Onincome_idChanging(value);
					this.SendPropertyChanging();
					this._income_id = value;
					this.SendPropertyChanged("income_id");
					this.Onincome_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryIncome_id", DbType="Int NOT NULL")]
		public int categoryIncome_id
		{
			get
			{
				return this._categoryIncome_id;
			}
			set
			{
				if ((this._categoryIncome_id != value))
				{
					if (this._CategoryIncome.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryIncome_idChanging(value);
					this.SendPropertyChanging();
					this._categoryIncome_id = value;
					this.SendPropertyChanged("categoryIncome_id");
					this.OncategoryIncome_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Income_DetailIncome", Storage="_DetailIncomes", ThisKey="income_id", OtherKey="income_id")]
		public EntitySet<DetailIncome> DetailIncomes
		{
			get
			{
				return this._DetailIncomes;
			}
			set
			{
				this._DetailIncomes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryIncome_Income", Storage="_CategoryIncome", ThisKey="categoryIncome_id", OtherKey="categoryIncome_id", IsForeignKey=true)]
		public CategoryIncome CategoryIncome
		{
			get
			{
				return this._CategoryIncome.Entity;
			}
			set
			{
				CategoryIncome previousValue = this._CategoryIncome.Entity;
				if (((previousValue != value) 
							|| (this._CategoryIncome.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryIncome.Entity = null;
						previousValue.Incomes.Remove(this);
					}
					this._CategoryIncome.Entity = value;
					if ((value != null))
					{
						value.Incomes.Add(this);
						this._categoryIncome_id = value.categoryIncome_id;
					}
					else
					{
						this._categoryIncome_id = default(int);
					}
					this.SendPropertyChanged("CategoryIncome");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Income", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Incomes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Incomes.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailIncomes(DetailIncome entity)
		{
			this.SendPropertyChanging();
			entity.Income = this;
		}
		
		private void detach_DetailIncomes(DetailIncome entity)
		{
			this.SendPropertyChanging();
			entity.Income = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pigether")]
	public partial class Pigether : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pigether_id;
		
		private int _user_id;
		
		private string _pigether_name;
		
		private double _goal;
		
		private EntitySet<DetailPigether> _DetailPigethers;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpigether_idChanging(int value);
    partial void Onpigether_idChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onpigether_nameChanging(string value);
    partial void Onpigether_nameChanged();
    partial void OngoalChanging(double value);
    partial void OngoalChanged();
    #endregion
		
		public Pigether()
		{
			this._DetailPigethers = new EntitySet<DetailPigether>(new Action<DetailPigether>(this.attach_DetailPigethers), new Action<DetailPigether>(this.detach_DetailPigethers));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pigether_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pigether_id
		{
			get
			{
				return this._pigether_id;
			}
			set
			{
				if ((this._pigether_id != value))
				{
					this.Onpigether_idChanging(value);
					this.SendPropertyChanging();
					this._pigether_id = value;
					this.SendPropertyChanged("pigether_id");
					this.Onpigether_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pigether_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string pigether_name
		{
			get
			{
				return this._pigether_name;
			}
			set
			{
				if ((this._pigether_name != value))
				{
					this.Onpigether_nameChanging(value);
					this.SendPropertyChanging();
					this._pigether_name = value;
					this.SendPropertyChanged("pigether_name");
					this.Onpigether_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_goal", DbType="Float NOT NULL")]
		public double goal
		{
			get
			{
				return this._goal;
			}
			set
			{
				if ((this._goal != value))
				{
					this.OngoalChanging(value);
					this.SendPropertyChanging();
					this._goal = value;
					this.SendPropertyChanged("goal");
					this.OngoalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pigether_DetailPigether", Storage="_DetailPigethers", ThisKey="pigether_id", OtherKey="pigether_id")]
		public EntitySet<DetailPigether> DetailPigethers
		{
			get
			{
				return this._DetailPigethers;
			}
			set
			{
				this._DetailPigethers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Pigether", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Pigethers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Pigethers.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DetailPigethers(DetailPigether entity)
		{
			this.SendPropertyChanging();
			entity.Pigether = this;
		}
		
		private void detach_DetailPigethers(DetailPigether entity)
		{
			this.SendPropertyChanging();
			entity.Pigether = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _email;
		
		private string _name;
		
		private string _password;
		
		private string _phone_number;
		
		private int _user_id;
		
		private double _balances;
		
		private double _savings;
		
		private EntitySet<Budget> _Budgets;
		
		private EntitySet<CategoryExpense> _CategoryExpenses;
		
		private EntitySet<CategoryIncome> _CategoryIncomes;
		
		private EntitySet<CategoryPeople> _CategoryPeoples;
		
		private EntitySet<Expense> _Expenses;
		
		private EntitySet<Income> _Incomes;
		
		private EntitySet<Pigether> _Pigethers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onphone_numberChanging(string value);
    partial void Onphone_numberChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OnbalancesChanging(double value);
    partial void OnbalancesChanged();
    partial void OnsavingsChanging(double value);
    partial void OnsavingsChanged();
    #endregion
		
		public User()
		{
			this._Budgets = new EntitySet<Budget>(new Action<Budget>(this.attach_Budgets), new Action<Budget>(this.detach_Budgets));
			this._CategoryExpenses = new EntitySet<CategoryExpense>(new Action<CategoryExpense>(this.attach_CategoryExpenses), new Action<CategoryExpense>(this.detach_CategoryExpenses));
			this._CategoryIncomes = new EntitySet<CategoryIncome>(new Action<CategoryIncome>(this.attach_CategoryIncomes), new Action<CategoryIncome>(this.detach_CategoryIncomes));
			this._CategoryPeoples = new EntitySet<CategoryPeople>(new Action<CategoryPeople>(this.attach_CategoryPeoples), new Action<CategoryPeople>(this.detach_CategoryPeoples));
			this._Expenses = new EntitySet<Expense>(new Action<Expense>(this.attach_Expenses), new Action<Expense>(this.detach_Expenses));
			this._Incomes = new EntitySet<Income>(new Action<Income>(this.attach_Incomes), new Action<Income>(this.detach_Incomes));
			this._Pigethers = new EntitySet<Pigether>(new Action<Pigether>(this.attach_Pigethers), new Action<Pigether>(this.detach_Pigethers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone_number", DbType="VarChar(12)")]
		public string phone_number
		{
			get
			{
				return this._phone_number;
			}
			set
			{
				if ((this._phone_number != value))
				{
					this.Onphone_numberChanging(value);
					this.SendPropertyChanging();
					this._phone_number = value;
					this.SendPropertyChanged("phone_number");
					this.Onphone_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_balances", DbType="Float NOT NULL")]
		public double balances
		{
			get
			{
				return this._balances;
			}
			set
			{
				if ((this._balances != value))
				{
					this.OnbalancesChanging(value);
					this.SendPropertyChanging();
					this._balances = value;
					this.SendPropertyChanged("balances");
					this.OnbalancesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_savings", DbType="Float NOT NULL")]
		public double savings
		{
			get
			{
				return this._savings;
			}
			set
			{
				if ((this._savings != value))
				{
					this.OnsavingsChanging(value);
					this.SendPropertyChanging();
					this._savings = value;
					this.SendPropertyChanged("savings");
					this.OnsavingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Budget", Storage="_Budgets", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<Budget> Budgets
		{
			get
			{
				return this._Budgets;
			}
			set
			{
				this._Budgets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CategoryExpense", Storage="_CategoryExpenses", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<CategoryExpense> CategoryExpenses
		{
			get
			{
				return this._CategoryExpenses;
			}
			set
			{
				this._CategoryExpenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CategoryIncome", Storage="_CategoryIncomes", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<CategoryIncome> CategoryIncomes
		{
			get
			{
				return this._CategoryIncomes;
			}
			set
			{
				this._CategoryIncomes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CategoryPeople", Storage="_CategoryPeoples", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<CategoryPeople> CategoryPeoples
		{
			get
			{
				return this._CategoryPeoples;
			}
			set
			{
				this._CategoryPeoples.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Expense", Storage="_Expenses", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<Expense> Expenses
		{
			get
			{
				return this._Expenses;
			}
			set
			{
				this._Expenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Income", Storage="_Incomes", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<Income> Incomes
		{
			get
			{
				return this._Incomes;
			}
			set
			{
				this._Incomes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Pigether", Storage="_Pigethers", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<Pigether> Pigethers
		{
			get
			{
				return this._Pigethers;
			}
			set
			{
				this._Pigethers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Budgets(Budget entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Budgets(Budget entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CategoryExpenses(CategoryExpense entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CategoryExpenses(CategoryExpense entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CategoryIncomes(CategoryIncome entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CategoryIncomes(CategoryIncome entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CategoryPeoples(CategoryPeople entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CategoryPeoples(CategoryPeople entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Expenses(Expense entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Expenses(Expense entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Incomes(Income entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Incomes(Income entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Pigethers(Pigether entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Pigethers(Pigether entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.viewExpenseBudget")]
	public partial class viewExpenseBudget
	{
		
		private int _user_id;
		
		private string _Expense_Category;
		
		private string _Budget;
		
		private string _Expenses;
		
		public viewExpenseBudget()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this._user_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Expense Category]", Storage="_Expense_Category", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Expense_Category
		{
			get
			{
				return this._Expense_Category;
			}
			set
			{
				if ((this._Expense_Category != value))
				{
					this._Expense_Category = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Budget", DbType="NVarChar(4000)")]
		public string Budget
		{
			get
			{
				return this._Budget;
			}
			set
			{
				if ((this._Budget != value))
				{
					this._Budget = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expenses", DbType="NVarChar(4000)")]
		public string Expenses
		{
			get
			{
				return this._Expenses;
			}
			set
			{
				if ((this._Expenses != value))
				{
					this._Expenses = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.viewAllExpense")]
	public partial class viewAllExpense
	{
		
		private int _ID_User;
		
		private string _Expenses;
		
		private string _Amount;
		
		private string _Added_Date;
		
		public viewAllExpense()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[ID User]", Storage="_ID_User", DbType="Int NOT NULL")]
		public int ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this._ID_User = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expenses", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Expenses
		{
			get
			{
				return this._Expenses;
			}
			set
			{
				if ((this._Expenses != value))
				{
					this._Expenses = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="NVarChar(4000)")]
		public string Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Added Date]", Storage="_Added_Date", DbType="VarChar(30)")]
		public string Added_Date
		{
			get
			{
				return this._Added_Date;
			}
			set
			{
				if ((this._Added_Date != value))
				{
					this._Added_Date = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.viewAllEarning")]
	public partial class viewAllEarning
	{
		
		private int _ID_User;
		
		private string _Earnings;
		
		private string _Amount;
		
		private string _Added_Date;
		
		public viewAllEarning()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[ID User]", Storage="_ID_User", DbType="Int NOT NULL")]
		public int ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this._ID_User = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Earnings", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Earnings
		{
			get
			{
				return this._Earnings;
			}
			set
			{
				if ((this._Earnings != value))
				{
					this._Earnings = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="NVarChar(4000)")]
		public string Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Added Date]", Storage="_Added_Date", DbType="VarChar(30)")]
		public string Added_Date
		{
			get
			{
				return this._Added_Date;
			}
			set
			{
				if ((this._Added_Date != value))
				{
					this._Added_Date = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.viewDetailPigether")]
	public partial class viewDetailPigether
	{
		
		private int _Pigether_ID;
		
		private string _People;
		
		private string _Amount;
		
		public viewDetailPigether()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Pigether ID]", Storage="_Pigether_ID", DbType="Int NOT NULL")]
		public int Pigether_ID
		{
			get
			{
				return this._Pigether_ID;
			}
			set
			{
				if ((this._Pigether_ID != value))
				{
					this._Pigether_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_People", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string People
		{
			get
			{
				return this._People;
			}
			set
			{
				if ((this._People != value))
				{
					this._People = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="NVarChar(4000)")]
		public string Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
